/** * USAGE: * * 1. Place this script in Applications > Adobe Illustrator > Presets > en_US > Scripts * 2. Restart Adobe Illustrator to activate the script * 3. The script will be available under menu File > Scripts > Center on Artboards *//** * LICENSE & COPYRIGHT * *   You are free to use, modify, and distribute this script as you see fit. *   No credit is required but would be greatly appreciated. * *   Scott Lewis - scott@iconify.it *   http://github.com/iconifyit *   http://iconify.it * *   THIS SCRIPT IS OFFERED AS-IS WITHOUT ANY WARRANTY OR GUARANTEES OF ANY KIND. *   YOU USE THIS SCRIPT COMPLETELY AT YOUR OWN RISK AND UNDER NO CIRCUMSTANCES WILL *   THE DEVELOPER AND/OR DISTRIBUTOR OF THIS SCRIPT BE HELD LIABLE FOR DAMAGES OF *   ANY KIND INCLUDING LOSS OF DATA OR DAMAGE TO HARDWARE OR SOFTWARE. IF YOU DO *   NOT AGREE TO THESE TERMS, DO NOT USE THIS SCRIPT. *//** * Declare the target app. */#target illustrator/** * Include the libraries we need. */#includepath "lib/";#include "JSON.jsxinc";#include "Utils.jsxinc";#include "Logger.jsxinc";#include "Iterator.js";#include "Object.ext.js";#include "lang.jsxinc";/** * Name that script. */#script "Resize Icons";/** * Disable Illustrator's alerts. */Utils.displayAlertsOff();/** * Set some global variables. */var $HERE = new File($.fileName).path + '/';var $HOME = new File('~/').fsName + '/';var $UUID = Utils.uuid().split('-').shift();/** * The config object for this script. * @type {{ *     APP_NAME: string, *     LOGFOLDER: string * }} */var CONFIG = Utils.create({    APP_NAME   : 'ai-resize-icons',    SCALE      : 100,    UNIT_TYPES : {        PT   : 0,        PICA : 1,        INCH : 2,        MM   : 3,        CM   : 4,        HQ   : 5,        PX   : 6    }});/** * Import external configs to over-ride the settings above. */#include "conf/config.js";/** * Update the CONFIG object with any user-specified * custom values. */Utils.update(CONFIG, DEFAULT_CONFIG || {});// End global setupvar Module = (function(CONFIG) {    // Create a logger instance.    Utils['logger'] = new Logger(CONFIG.APP_NAME, Utils.folder(CONFIG.LOG_FILE_PATH));    /**     * Create a new instance of this module.     * @constructor     */    var Instance = function() {        app.coordinateSystem = CoordinateSystem.ARTBOARDCOORDINATESYSTEM;        app.preferences.setIntegerPreference("rulerType", CONFIG.UNIT_TYPES.PX);        if (app.documents.length > 0) {            var doc   = app.activeDocument;            var Artboards = new Iterator(doc.artboards);            var theUnit  = "%";            var theValue = 100;            var n = 0;            var max = 5;            while ((isNaN(theValue) || ['%', 'px'].indexOf(theUnit) == -1) && n < max) {                theResponse = Window.prompt (LANG.ENTER_NEW_SIZE, '100%');                theUnit     = theResponse.replace(/[0-9]+/, '');                theValue    = parseFloat(theResponse);                n++;            }            if (isNaN(theValue) || ['%', 'px'].indexOf(theUnit) == -1) {                return;            }            Utils.showProgressBar(Artboards.size());            Artboards.each(function(i) {                $.writeln("[" + i + "] " + this.name);                doc.artboards.setActiveArtboardIndex(i);                doc.selectObjectsOnActiveArtboard();                app.executeMenuCommand('group');                var left     = this.artboardRect[0];                var top      = this.artboardRect[1];                var right    = this.artboardRect[2];                var bottom   = this.artboardRect[3];                var abWidth  = Math.abs(right) - Math.abs(left);                var abHeight = Math.abs(bottom) - Math.abs(top);                // If there are no visible items, update the progress bar and continue.                if (doc.selection.length == 0) {                    Utils.updateProgress(                        localize({en_US: LANG.NO_VISIBLE_ITEMS}, i)                    );                    return;                }                var groupItem = doc.selection[0];                try {                    CONFIG.SCALE = calcScale(groupItem, theUnit, theValue, abWidth, abHeight);                }                catch(e) {                    Utils.progress.close();                    return new Error(e);                }                var message = localize({ en_US: LANG.CALCULATED_SIZE }, CONFIG.SCALE);                Utils.logger.info( message );                if (isNaN(CONFIG.SCALE)) {                    Utils.progress.close();                    return new Error(LANG.SCALE_MUST_BE_NUMBER);                }                try {                    Utils.updateProgressMessage(                        localize({en_US: 'Grouping selection'})                    );                    Utils.updateProgressMessage(                        localize(                            {en_US: 'Selection is %1'},                            Utils.isVisibleAndUnlocked(doc.selection)                                ? 'Visible'                                : 'Hidden'                        )                    );                    if (! Utils.isVisibleAndUnlocked(doc.selection)) return;                    $.writeln("Mock resize item " + i);                    // Utils.resizeArtwork(                    //     groupItem,                    //     groupItem.width,                    //     groupItem.height,                    //     abWidth,                    //     abHeight,                    //     CONFIG.SCALE                    // );                }                catch(e) {                    Utils.progress.close();                    Utils.logger.error(e.message);                }                redraw();                Utils.updateProgress(localize({en_US: 'Selection centered'}));            });            Utils.progress.close();        }        else  {            alert(localize({en_US: 'There are no open documents'}))        }    }    function calcScale(groupItem, theUnit, theValue, abWidth, abHeight) {        var scale = theValue;        $.writeln("Unit & Value : " + theUnit + ", " + theValue);        if (Utils.trim(theUnit) != '%' && Utils.trim(theUnit) != '') {            scale = Utils.scaleFromSize(                groupItem.width, groupItem.height,                theValue, theValue            );            if (theValue > abWidth || theValue > abHeight) {                throw new Error(localize({en_US: LANG.ITEM_MUST_FIT_ARTBOARD}));            }            var ratio = CONFIG.SCALE / 100;            if (ratio * groupItem.width > abWidth || ratio * groupItem.height > abHeight) {                throw new Error(localize({en_US: LANG.ITEM_MUST_FIT_ARTBOARD}));            }        }        return scale;    }    /**     * Returns the public module object.     */    return {        /**         * Runs the module code.         */        run: function() {            new Instance();        }    }})(CONFIG);Module.run();Utils.displayAlertsOn();